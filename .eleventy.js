const fs = require('fs');
const path = require('path');

const autoprefixer = require('autoprefixer');
const postcss = require("postcss");
const postcssImport = require("postcss-import");
const postcssMixins = require("postcss-mixins");
const postcssNested = require("postcss-nested");
const postcssCsso = require('postcss-csso'); // error for @container query
const postcssComment = require('postcss-comment');

const esbuild = require('esbuild');

const pluginSvgSprite = require("eleventy-plugin-svg-sprite");
const shortcodes = require('./utils/shortcodes.js');
const paredshortcodes = require('./utils/paredshortcodes.js');
const shortNuncodes = require('./utils/shortnuncodes.js');
const eleventyNavigationPlugin = require("@11ty/eleventy-navigation");
const htmlMin = require('html-minifier-terser');

module.exports = function(config){

  /* SVG sprite */
  config.addPlugin(pluginSvgSprite, {
    path: "./src/images/icons",
    svgSpriteShortcode: "iconsprite",
    outputFilepath: "./build/images/sprite.svg",
    spriteConfig: {
      shape: {
        dimension: {
          maxWidth: 30,
          maxHeight: 30
        },
        spacing: {
          padding: 0
        },
        transform: [{
          svgo: {
            plugins: [
              {
              name: 'removeAttrs',
              params: {
                attrs: '(fill|stroke|style)'
                }
              }
              /* { removeViewBox: false },
              { removeUnusedNS: false },
              { removeUselessStrokeAndFill: true },
              { cleanupIDs: false },
              { removeComments: true },
              { removeEmptyAttrs: true },
              { removeEmptyText: true },
              { collapseGroups: true },
               */
          ]
          }
        }]        
      }
    }
  })

  /* CSS */
  config.addPassthroughCopy("src/styles/*.css"); 
  config.addTemplateFormats('css');
  const styles = [
		'./src/styles/main.css',
		'./src/styles/tablet.css',
		'./src/styles/desctop.css',
		'./src/styles/components/audiorecorder.css',
		'./src/styles/components/audioplayer.css',
		'./src/styles/components/gsap-scroll-trigger.css',
	];
  config.addExtension('css', {
    outputFileExtension: 'css',
    compile: async (content, path) => {
      // Processing
      if (!styles.includes(path)) {
				return;
			}
      return async () => {
        let output = await postcss([
          postcssImport,
          postcssMixins,
          postcssNested,
          // tailwind,
          autoprefixer,
          postcssCsso({ 
            restructure: false,
            sourceMap: true,
            comments: false
          }),
        ]).process(content, {
          from: path, parser: postcssComment
        });
      
        return output.css;
      };
    }
  });

  /* JavaScript */
  config.addPassthroughCopy("src/script/*.njk");
  config.addTemplateFormats('js'); 
  const scripts = [
		'./src/scripts/main.js',
	];
  config.addExtension('js', {
    outputFileExtension: 'js',
    compile: async (content, path) => {
      // Processing
      if (!scripts.includes(path)) {
				return;
			}
      return async () => {
        let output = await process(content, {
          from: path,
        });
      
        return output.js;
      };
    }
  });

  // Shortcodes
  Object.keys(shortcodes).forEach((shortcodeName) => {
    config.addShortcode(shortcodeName, shortcodes[shortcodeName])
  });

  // ParedShortcodes
  Object.keys(paredshortcodes).forEach((shortcodeName) => {
    config.addPairedShortcode(shortcodeName, paredshortcodes[shortcodeName])
  });

  // Shortcodes Nunjucks
  Object.keys(shortNuncodes).forEach((shortcodeName) => {
    config.addNunjucksShortcode(shortcodeName, shortNuncodes[shortcodeName])
  });

  /* Nav */
  config.addPlugin(eleventyNavigationPlugin);

  /* HTML */
  config.addTransform('html-minify', async (content, path) => {
		if (path && path.endsWith('.html')) {
			return await htmlMin.minify(content, {
				collapseBooleanAttributes: true,
				collapseWhitespace: true,
        preserveLineBreaks: true,
				decodeEntities: true,
				includeAutoGeneratedTags: false,
				removeComments: false,
			});
		}

		return content;
	});

  /* config base 11ty */
  return {
    passthroughFileCopy: true,
    dir: {
      input: "src",
      output: "build",
      includes: "_includes",
      layouts: "_layouts",
      data: "_data",
    },
    dataTemplateEngine: 'njk',
		markdownTemplateEngine: 'njk',
		htmlTemplateEngine: 'njk',
    templateFormats: [
			'md', 'njk'
		],
  };
};
